{"version":3,"sources":["Summoner/Summoner.js","App.js","serviceWorker.js","index.js"],"names":["summoner","props","react_default","a","createElement","style","marginLeft","className","fontWeight","name","float","kills","dmg2Champ","parseInt","dmgTaken","deaths","assists","axios","require","App","state","findNameHandler","document","querySelector","value","concat","then","res","console","log","data","_this","setState","catch","e","error","_this2","this","leftAlignStyle","textAlign","id","onClick","participantIdentities","map","i","Summoner_Summoner","player","summonerName","participants","stats","totalDamageDealtToChampions","totalDamageTaken","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAmCeA,SAhCE,SAACC,GAEhB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAW,OACtBJ,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aACXL,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEG,WAAY,SACvBP,EAAMQ,KADT,IACeP,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACK,MAAM,UAApB,WAEfR,EAAAC,EAAAC,cAAA,sBAAcH,EAAMU,MAClBT,EAAAC,EAAAC,cAAA,QAAMG,UAAU,UAAUN,EAAMU,QAElCT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMW,WACzBV,EAAAC,EAAAC,cAAA,QAAMG,UAAU,UAAUM,SAA2B,KAAlBZ,EAAMW,aAE3CV,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMa,SACtBZ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,UAAUM,SAAUZ,EAAMa,SAASb,EAAMc,OAAQ,QAEnEb,EAAAC,EAAAC,cAAA,uBAAeH,EAAMc,QAGrBb,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMe,aCxBxBC,EAAQC,EAAQ,IAyCPC,6MAtCbC,MAAQ,KAKRC,gBAAkB,WAChB,IAAMZ,EAAOa,SAASC,cAAc,UAAUC,MAC9CP,EAAK,iCAAAQ,OAAkChB,IACpCiB,KAAK,SAAAC,GAASC,QAAQC,IAAIF,EAAIG,MAAMC,EAAKC,SAAS,CAAEF,KAAMH,EAAIG,SAE9DG,MAAM,SAAAC,GAAC,OAAIN,QAAQO,MAAMD,2HAGrB,IAAAE,EAAAC,KAEDC,EAAiB,CAAEhC,WAAY,KAAME,WAAY,GAAI+B,UAAW,QACtE,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,MAJgB,CAAEkC,UAAW,SAAU/B,WAAY,KAIvD,aACAN,EAAAC,EAAAC,cAAA,MAAIC,MAAOiC,GAAX,mCAEApC,EAAAC,EAAAC,cAAA,SAAOoC,GAAG,QAAQnC,MAAOiC,IACzBpC,EAAAC,EAAAC,cAAA,UAAQqC,QAASJ,KAAKhB,iBAAtB,WACCgB,KAAKjB,MAAMU,MAAQO,KAAKjB,MAAMU,KAAKY,sBAAsBC,IAAI,SAACT,EAAGU,GAChE,OAAQ1C,EAAAC,EAAAC,cAACyC,EAAD,CACNpC,KAAMyB,EAAEY,OAAOC,aACfpC,MAAOyB,EAAKhB,MAAMU,KAAKkB,aAAaJ,GAAGK,MAAMtC,MAC7CC,UAAWwB,EAAKhB,MAAMU,KAAKkB,aAAaJ,GAAGK,MAAMC,4BACjDpC,SAAUsB,EAAKhB,MAAMU,KAAKkB,aAAaJ,GAAGK,MAAME,iBAChDpC,OAAQqB,EAAKhB,MAAMU,KAAKkB,aAAaJ,GAAGK,MAAMlC,OAC9CC,QAASoB,EAAKhB,MAAMU,KAAKkB,aAAaJ,GAAGK,MAAMjC,oBA/BzCoC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAAStC,SAASuC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.66f3d1db.chunk.js","sourcesContent":["import React from 'react';\nimport Summoner from './Summoner.css';\n\nconst summoner = (props) => {\n  let total = 0;\n  return (\n    <div style={{marginLeft:'5%'}}>\n      <p className='Container'>\n        <text>Profile Icon</text>\n        <img/>\n        <div style={{ fontWeight :'bold' }}>\n          {props.name} <span style={{float:'right'}}>Points</span>\n        </div>\n        <div>Kills:  {props.kills}\n          <span className='Points'>{props.kills}</span>\n        </div>\n        <div>\n          <span>Dmg Dealt:  {props.dmg2Champ}</span>\n          <span className='Points'>{parseInt(props.dmg2Champ * .0004)}</span>\n        </div>\n        <div>Dmg Taken:  {props.dmgTaken}\n          <span className='Points'>{parseInt((props.dmgTaken/props.deaths)*0.002)}</span>\n        </div>\n        <div>Deaths:  {props.deaths}\n          {/* <span className='Points'>/{props.deaths}</span> */}\n        </div>\n        <div>Assists:  {props.assists}\n          {/* <span className='Points'>{5}</span> */}\n        </div>\n      </p>\n    </div>\n  )\n\n}\n\nexport default summoner;\n\n","import React, { Component } from 'react';\nimport Summoner from './Summoner/Summoner'\nconst axios = require('axios');\n\nclass App extends Component {\n  state = {}\n\n  componentDidMount() {\n    \n  }  \n  findNameHandler = () => {\n    const name = document.querySelector('#input').value;\n    axios(`http://172.31.0.40:3131/?name=${name}`)\n      .then(res => { console.log(res.data);this.setState({ data: res.data })})\n      //.then(e => this.setState({ data: e }))\n      .catch(e => console.error(e));\n  }\n\n  render() {\n    const lightWeightFont = { textAlign: 'center', fontWeight: 10 };\n    const leftAlignStyle = { marginLeft: '5%', fontWeight: 10, textAlign: 'left' };\n    return (\n      <div >\n        <h1 style={lightWeightFont}>Skin Game</h1>\n        <h2 style={leftAlignStyle}>\n          Enter Name of Summoner in Party</h2>\n        <input id=\"input\" style={leftAlignStyle}></input>\n        <button onClick={this.findNameHandler}>PressMe</button>\n        {this.state.data && this.state.data.participantIdentities.map((e, i) => {\n          return (<Summoner\n            name={e.player.summonerName}\n            kills={this.state.data.participants[i].stats.kills}\n            dmg2Champ={this.state.data.participants[i].stats.totalDamageDealtToChampions}\n            dmgTaken={this.state.data.participants[i].stats.totalDamageTaken}\n            deaths={this.state.data.participants[i].stats.deaths}\n            assists={this.state.data.participants[i].stats.assists}\n          />)\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}